/// <reference types="react" />
import * as PropTypes from 'prop-types';
import { ViewProperties } from 'react-native';
declare const iface: {
    propTypes: {
        drawGridBackground: PropTypes.Requireable<any>;
        gridBackgroundColor: PropTypes.Requireable<any>;
        drawBorders: PropTypes.Requireable<any>;
        borderColor: PropTypes.Requireable<any>;
        borderWidth: PropTypes.Requireable<any>;
        maxVisibleValueCount: PropTypes.Requireable<any>;
        autoScaleMinMaxEnabled: PropTypes.Requireable<any>;
        keepPositionOnRotation: PropTypes.Requireable<any>;
        scaleEnabled: PropTypes.Requireable<any>;
        scaleXEnabled: PropTypes.Requireable<any>;
        scaleYEnabled: PropTypes.Requireable<any>;
        dragEnabled: PropTypes.Requireable<any>;
        pinchZoom: PropTypes.Requireable<any>;
        doubleTapToZoomEnabled: PropTypes.Requireable<any>;
        yAxis: PropTypes.Requireable<any>;
        zoom: PropTypes.Requireable<any>;
        animation: PropTypes.Requireable<any>;
        chartBackgroundColor: PropTypes.Requireable<any>;
        logEnabled: PropTypes.Requireable<any>;
        noDataText: PropTypes.Requireable<any>;
        touchEnabled: PropTypes.Requireable<any>;
        dragDecelerationEnabled: PropTypes.Requireable<any>;
        dragDecelerationFrictionCoef: (props: any, propName: string, componentName: string) => Error | undefined;
        chartDescription: PropTypes.Requireable<any>;
        legend: PropTypes.Requireable<any>;
        xAxis: PropTypes.Requireable<any>;
        marker: PropTypes.Requireable<any>;
        accessibilityLabel?: React.Validator<ViewProperties> | undefined;
        accessible?: React.Validator<ViewProperties> | undefined;
        hitSlop?: React.Validator<ViewProperties> | undefined;
        onAcccessibilityTap?: React.Validator<ViewProperties> | undefined;
        onLayout?: React.Validator<ViewProperties> | undefined;
        onMagicTap?: React.Validator<ViewProperties> | undefined;
        pointerEvents?: React.Validator<ViewProperties> | undefined;
        removeClippedSubviews?: React.Validator<ViewProperties> | undefined;
        style?: React.Validator<ViewProperties> | undefined;
        testID?: React.Validator<ViewProperties> | undefined;
        accessibilityComponentType?: React.Validator<ViewProperties> | undefined;
        accessibilityLiveRegion?: React.Validator<ViewProperties> | undefined;
        collapsable?: React.Validator<ViewProperties> | undefined;
        importantForAccessibility?: React.Validator<ViewProperties> | undefined;
        needsOffscreenAlphaCompositing?: React.Validator<ViewProperties> | undefined;
        renderToHardwareTextureAndroid?: React.Validator<ViewProperties> | undefined;
        accessibilityTraits?: React.Validator<ViewProperties> | undefined;
        shouldRasterizeIOS?: React.Validator<ViewProperties> | undefined;
        onStartShouldSetResponder?: React.Validator<ViewProperties> | undefined;
        onMoveShouldSetResponder?: React.Validator<ViewProperties> | undefined;
        onResponderEnd?: React.Validator<ViewProperties> | undefined;
        onResponderGrant?: React.Validator<ViewProperties> | undefined;
        onResponderReject?: React.Validator<ViewProperties> | undefined;
        onResponderMove?: React.Validator<ViewProperties> | undefined;
        onResponderRelease?: React.Validator<ViewProperties> | undefined;
        onResponderStart?: React.Validator<ViewProperties> | undefined;
        onResponderTerminationRequest?: React.Validator<ViewProperties> | undefined;
        onResponderTerminate?: React.Validator<ViewProperties> | undefined;
        onStartShouldSetResponderCapture?: React.Validator<ViewProperties> | undefined;
        onMoveShouldSetResponderCapture?: React.Validator<ViewProperties> | undefined;
        onTouchStart?: React.Validator<ViewProperties> | undefined;
        onTouchMove?: React.Validator<ViewProperties> | undefined;
        onTouchEnd?: React.Validator<ViewProperties> | undefined;
        onTouchCancel?: React.Validator<ViewProperties> | undefined;
        onTouchEndCapture?: React.Validator<ViewProperties> | undefined;
    };
};
export default iface;
